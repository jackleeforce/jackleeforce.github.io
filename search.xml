<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>公司IT来邮件告知我电脑中毒</title>
      <link href="/%E5%B7%A5%E4%BD%9C/2019-10-11-%E5%85%AC%E5%8F%B8IT%E6%9D%A5%E9%82%AE%E4%BB%B6%E5%91%8A%E7%9F%A5%E6%88%91%E7%94%B5%E8%84%91%E4%B8%AD%E6%AF%92.html"/>
      <url>/%E5%B7%A5%E4%BD%9C/2019-10-11-%E5%85%AC%E5%8F%B8IT%E6%9D%A5%E9%82%AE%E4%BB%B6%E5%91%8A%E7%9F%A5%E6%88%91%E7%94%B5%E8%84%91%E4%B8%AD%E6%AF%92.html</url>
      
        <content type="html"><![CDATA[<h2 id="中毒"><a href="#中毒" class="headerlink" title="中毒"></a>中毒</h2><p>昨天下午收到公司 IT 来邮件说，在公司深信服系统中监测出我的电脑疑似中毒:<br><img src="../assets/images/image-20191011111740823.png" alt="image-20191011111740823"></p><p>看到邮件，第一时间觉得不可思议，我用苹果 OSX 系统，中毒概率应该比较低吧。不过深入想了下，自己平时下载软件，能直接下载 DMG 的，就不在 AppStore里面下，平时如果没有认真防范，中招也不是不可能。</p><h2 id="中了什么病毒"><a href="#中了什么病毒" class="headerlink" title="中了什么病毒"></a>中了什么病毒</h2><p>根据邮件里面的关键字，谷歌了一下：</p><p><img src="../assets/images/image-20191011112454594.png" alt="image-20191011112454594"></p><p>看来公司IT真没冤枉我，这个 Mokes 有专门针对苹果 OSX 的版本。</p><h2 id="查毒杀毒"><a href="#查毒杀毒" class="headerlink" title="查毒杀毒"></a>查毒杀毒</h2><p>自从用了苹果系统，就从来没装过杀毒软件，在上一家公司的时候，公司 IT 部门会定期检查员工个人电脑上是否有装杀毒软件，每次临查，我都是提前溜到公司天台去躲避检查。现在知道电脑上中毒了，不把它纠出来也不放心啊，苹果 OSX 的杀毒软件不多，大多数是国外品牌，我挑选了以前在 Windows 上经常用的 ESET ：<br><img src="../assets/images/image-20191011113215660.png" alt="image-20191011113215660"></p><p>下载安装好后，更新了一下防病毒引擎:<br><img src="../assets/images/image-20191011113308062.png" alt="image-20191011113308062"></p><p>看着设置面板提醒，当前为免费评估版本，免费使用一个月，心理又不痛快了，谷歌了下 ESET 激活码，里面随便挑一个没过期的，还真可以用！😄。</p><p><img src="../assets/images/image-20191011113435803.png" alt="image-20191011113435803"><br><img src="../assets/images/image-20191011113517769.png" alt="image-20191011113517769"></p><p>放着慢慢查杀吧，希望尽快将病毒纠出来：<br><img src="../assets/images/image-20191011113734118.png" alt="image-20191011113734118"></p><h2 id="杀毒结果"><a href="#杀毒结果" class="headerlink" title="杀毒结果"></a>杀毒结果</h2><p>坑，用 ESET 扫了 7 个多小时，结果扫不出病毒，这下可咋整？<br><img src="../assets/images/image-20191011165637192.png" alt="image-20191011165637192"></p><p>打算发个邮件给公司 IT， 让他们提供个解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作,计算机技能,个人计算机,PC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins 声明式pipeline调用远程Docker执行任务</title>
      <link href="/%E5%B7%A5%E4%BD%9C/2019-09-27-jenkins%20%E5%A3%B0%E6%98%8E%E5%BC%8Fpipeline%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8BDocker%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1.html"/>
      <url>/%E5%B7%A5%E4%BD%9C/2019-09-27-jenkins%20%E5%A3%B0%E6%98%8E%E5%BC%8Fpipeline%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8BDocker%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="jenkins-声明式pipeline调用远程Docker执行任务"><a href="#jenkins-声明式pipeline调用远程Docker执行任务" class="headerlink" title="jenkins 声明式pipeline调用远程Docker执行任务"></a>jenkins 声明式pipeline调用远程Docker执行任务</h1><h2 id="调用远程服务器执行任务的好处"><a href="#调用远程服务器执行任务的好处" class="headerlink" title="调用远程服务器执行任务的好处"></a>调用远程服务器执行任务的好处</h2><ul><li>一些 CPU 密集计算型任务，比如编译，静态扫描等等，放在单独的服务器上执行，不会对 Jenkins 所在服务器造成性能负担。</li><li>通过配置多台同样标签的子节点服务器，可以将多个任务分配到这些子节点上并行处理。</li></ul><h2 id="将任务执行环境采用-docker-部署而不是直接安装的好处"><a href="#将任务执行环境采用-docker-部署而不是直接安装的好处" class="headerlink" title="将任务执行环境采用 docker 部署而不是直接安装的好处"></a>将任务执行环境采用 docker 部署而不是直接安装的好处</h2><ul><li><a href="https://www.ibm.com/developerworks/community/blogs/3302cc3b-074e-44da-90b1-5055f1dc0d9c/entry/what-is-docker-containers?lang=en" target="_blank" rel="noopener">什么是 Docker ？容器对应用程序的好处</a></li><li><a href="https://www.zhihu.com/question/22871084" target="_blank" rel="noopener">Docker 有什么优势</a></li></ul><h2 id="Jenkins-配置任务在远程服务器-Docker-容器中执行"><a href="#Jenkins-配置任务在远程服务器-Docker-容器中执行" class="headerlink" title="Jenkins 配置任务在远程服务器 Docker 容器中执行"></a>Jenkins 配置任务在远程服务器 Docker 容器中执行</h2><h3 id="1-配置-Jenkins-子节点"><a href="#1-配置-Jenkins-子节点" class="headerlink" title="1. 配置 Jenkins 子节点"></a>1. 配置 Jenkins 子节点</h3><ul><li><a href="https://wiki.jenkins.io/pages/viewpage.action?pageId=75893612" target="_blank" rel="noopener">Step by step guide to set up master and slave machines</a></li></ul><p>配置完后效果如下图，这里我配置了两台 Slave 节点：epay_compile 和 sonarqube_scanner。分别用来做编译和sonarqube 代码静态扫描<br><img src="../assets/images/006y8mN6ly1g7dw7qmy0bj30q00fm760.jpg" alt></p><p>我们使用 sonarqube_scanner 这台服务器做演示，注意这台服务器的标签: sonarqube ,后续我们将使用这个标签。</p><p><img src="../assets/images/image-20190927110849522.png" alt="image-20190927110849522"></p><h3 id="2-远程服务器上镜像构建"><a href="#2-远程服务器上镜像构建" class="headerlink" title="2. 远程服务器上镜像构建"></a>2. 远程服务器上镜像构建</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> jacklee &lt;jackleeforce@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span> apt-get update -qq \</span><br><span class="line">  &amp;&amp; apt-get install -y cppcheck unzip wget \</span><br><span class="line">  &amp;&amp; apt-get clean \</span><br><span class="line">  &amp;&amp; wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip -O sonarqube-scanner.zip \</span><br><span class="line">  &amp;&amp; unzip sonarqube-scanner.zip \</span><br><span class="line">  &amp;&amp; mv sonar-scanner-4.0.0.1744-linux sonarqube-scanner \</span><br><span class="line">  &amp;&amp; rm sonarqube-scanner.zip</span><br><span class="line"></span><br><span class="line">ENV PATH=/sonarqube-scanner/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li>我们在ubuntu 16.04的基础上构建了一个安装好 <a href="http://cppcheck.sourceforge.net/" target="_blank" rel="noopener">cppcheck</a>和<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/" target="_blank" rel="noopener">sonarqube-scanner</a>的镜像，以后只要启动这个镜像的容器，就可以使用  <a href="http://cppcheck.sourceforge.net/" target="_blank" rel="noopener">cppcheck</a>和 <a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/" target="_blank" rel="noopener">sonarqube-scanner</a> 这两个工具。</li></ul><p>执行如下命令，构建镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t sonarqube-scanner:latest .</span><br></pre></td></tr></table></figure><ul><li>经过上面的步骤后，我们在 sonarqube_scanner 这个子节点服务器上有了一个标签为 sonarqube-scanner 的 docker 镜像。</li></ul><h3 id="3-pipeline-配置"><a href="#3-pipeline-配置" class="headerlink" title="3. pipeline 配置"></a>3. pipeline 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stage(&apos;code quality check&apos;) &#123;</span><br><span class="line">                    agent &#123; </span><br><span class="line">                        docker &#123;</span><br><span class="line">                            image &apos;sonarqube-scanner&apos;</span><br><span class="line">                            label &apos;sonarqube&apos; </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                    steps &#123;</span><br><span class="line">                        sh &apos;cppcheck --enable=all --xml-version=2 . 2&gt; test.sonarqube.report.xml&apos;</span><br><span class="line">                        withSonarQubeEnv(&apos;cell_sonarqube&apos;) &#123;</span><br><span class="line">                            sh &quot;sonar-scanner -Dsonar.projectKey=$&#123;在sonarqube上创建的项目key&#125; \</span><br><span class="line">                            -Dsonar.sources=. -Dsonar.host.url=$(你的sonarqube URL) -Dsonar.login=$&#123;在sonarqube上创建的项目token&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                        timeout(time: 10, unit: &apos;MINUTES&apos;) &#123;</span><br><span class="line">                            waitForQualityGate abortPipeline: true</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，要在 Jenkins Pipeline 中让任务在远程服务器上执行，关键是在任务中按照以下写法配置好 agent，其中 <code>image</code> 是远程子节点服务器上的 docker image 名称，<code>label</code>是远程子节点服务器的标签。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">agent &#123; </span><br><span class="line">  docker &#123;</span><br><span class="line">    image &apos;sonarqube-scanner&apos;</span><br><span class="line">    label &apos;sonarqube&apos; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更多有关 sonarqube for jenkins pipline 的使用配置，请参考: <a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/" target="_blank" rel="noopener">Using a Jenkins pipeline</a>]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins,持续集成,CI/CD,自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>躺在沙发上看电影的正确姿势</title>
      <link href="/%E6%95%99%E7%A8%8B/2019-06-17-%E8%BA%BA%E5%9C%A8%E6%B2%99%E5%8F%91%E4%B8%8A%E7%9C%8B%E7%94%B5%E5%BD%B1%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.html"/>
      <url>/%E6%95%99%E7%A8%8B/2019-06-17-%E8%BA%BA%E5%9C%A8%E6%B2%99%E5%8F%91%E4%B8%8A%E7%9C%8B%E7%94%B5%E5%BD%B1%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF.html</url>
      
        <content type="html"><![CDATA[<h2 id="躺在沙发上看电影的正确姿势"><a href="#躺在沙发上看电影的正确姿势" class="headerlink" title="躺在沙发上看电影的正确姿势"></a>躺在沙发上看电影的正确姿势</h2><h3 id="解决什么问题"><a href="#解决什么问题" class="headerlink" title="解决什么问题"></a>解决什么问题</h3><p>自己平时通过组装的一台 NAS 下载电影，这台 NAS运行着Ubuntu Desktop系统，<br>电影下载完了以后，通过 Nas 上面的 VLC 打开，然后在电视上播放。问题来了，观看的过程中<br>如果需要暂停，快进等操作，得从沙发上爬起来跑到电视旁边用鼠标操作，非常反人类。</p><h3 id="解决途经"><a href="#解决途经" class="headerlink" title="解决途经"></a>解决途经</h3><p>谷歌后发现 VLC 是可以通过 VLC Remote 软件进行远程控制的，这样躺沙发上，可以通过手机上的应用远程控制NAS上面的 VLC，实现进度条拖拉，换片，暂停播放等操作。</p><h3 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件"></a>需要的软件</h3><h4 id="被控制端："><a href="#被控制端：" class="headerlink" title="被控制端："></a>被控制端：</h4><p><a href="https://www.videolan.org/vlc/index.html" target="_blank" rel="noopener">VLC</a> 播放应用, 目前看官网，基本全平台支持。</p><p> <img src="../assets/images/image-20190617163432663.png" alt="image-20190617163432663"></p><h4 id="控制端"><a href="#控制端" class="headerlink" title="控制端:"></a>控制端:</h4><ul><li>收费<ul><li>IOS: <a href="https://apps.apple.com/us/app/vlc-remote/id297244048" target="_blank" rel="noopener">VLC Remote</a></li><li>Android: <a href="https://play.google.com/store/apps/details?id=com.hobbyistsoftware.android.vlcremote_us" target="_blank" rel="noopener">VLC Remote</a></li></ul></li><li><p>免费</p><ul><li><p>IOS: <a href="https://apps.apple.com/us/app/vlc-remote-lite/id299344206" target="_blank" rel="noopener">VLC Remote Lite</a></p></li><li><p>Android: <a href="https://play.google.com/store/apps/details?id=com.hobbyistsoftware.android.vlcremote_usfree" target="_blank" rel="noopener">VLC Remote Free</a></p></li></ul></li></ul><h4 id="确保被控制端与控制端处于同一网段"><a href="#确保被控制端与控制端处于同一网段" class="headerlink" title="确保被控制端与控制端处于同一网段"></a><font color="#dd0000">确保被控制端与控制端处于同一网段</font></h4><h3 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h3><p>被控制端 </p><ul><li><p>打开VLC 工具 -&gt; 首选项 -&gt; Interface</p><p><img src="../assets/images/prepare-remote-control-vlc1.png" alt="img"></p></li></ul><ul><li><p>默认VLC显示的是简单设置选项。这里我们需要打开高级设置选项，在屏幕底部，单选 All。</p><p><img src="../assets/images/prepare-remote-control-vlc2.png" alt="img"></p></li></ul><ul><li><p>点击Main interfaces 菜单</p><p><img src="../assets/images/prepare-remote-control-vlc3.png" alt="img"></p></li></ul><ul><li><p>选中 Web</p><p><img src="../assets/images/prepare-remote-control-vlc4.png" alt="img"></p></li><li><p>设置 Web 的访问密码，这个密码后续在控制端应用需要输入</p><p><img src="../assets/images/image-20190617174104010.png" alt="image-20190617174104010"></p></li><li><p>保存，并重启 VLC 应用</p></li><li><p>确保控制端没有防火墙，或者已经针对 VLC 配置了防火墙入站策略</p></li><li><p>打开手机端 VLC Remote 应用，不出意外，应该会自动发现同一网段内运行 VLC 的机器，点击即可进行控制</p></li><li><p>躺沙发上，欣赏电影吧^_^</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set up the ladder</title>
      <link href="/%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/2019-06-09-Set%20up%20the%20ladder.html"/>
      <url>/%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/2019-06-09-Set%20up%20the%20ladder.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set-up-the-ladder"><a href="#Set-up-the-ladder" class="headerlink" title="Set up the ladder"></a>Set up the ladder</h1><h2 id="Install-v-two-ray-on-linux-server"><a href="#Install-v-two-ray-on-linux-server" class="headerlink" title="Install v[two]ray on linux server"></a>Install v[two]ray on linux server</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"></span><br><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>The script installs the following files.</p><ul><li><code>/usr/bin/v[two]ray/v[two]ray</code>: v[two]ray executable</li><li><code>/usr/bin/v[two]ray/v[two]ctl</code>: Utility</li><li><code>/etc/v[two]ray/config.json</code>: Config file</li><li><code>/usr/bin/v[two]ray/geoip.dat</code>: IP data file</li><li><code>/usr/bin/v[two]ray/geosite.dat</code>: domain data file</li></ul><p>This script also configures v[two]ray to run as service, if systemd is available.</p><p>After installation, we will need to:</p><ol><li>Update <code>/etc/v[two]ray/config.json</code> file for your own scenario.</li><li>Run <code>service v[two]ray start</code> command to start v[two]ray.</li><li>Optionally run <code>service v[two]ray start|stop|status|reload|restart|force-reload</code> to control v[two]ray service.</li></ol><h2 id="Configuration-the-v-two-ray"><a href="#Configuration-the-v-two-ray" class="headerlink" title="Configuration the v[two]ray"></a>Configuration the v[two]ray</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/v[two]ray/config.json</span><br></pre></td></tr></table></figure><h3 id="modify-listening-port"><a href="#modify-listening-port" class="headerlink" title="modify listening port"></a>modify listening port</h3><p><img src="../assets/images/image-20190609085834426.png" alt="image-20190609085834426"></p><h3 id="add-client-uuid"><a href="#add-client-uuid" class="headerlink" title="add client uuid"></a>add client uuid</h3><p><img src="../assets/images/image-20190609090011450.png" alt="image-20190609090011450"></p><ul><li><p>Each client user uses one line of configuration markup.</p></li><li><p>you can copy the following content and modiy your own uuid and name:</p><ul><li>{“id”: “xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx”,”level”: 1,”alterId”: 64,”name”: “xxxx”}</li></ul></li><li><p>uuid can generate from <a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">uuid generator</a></p></li></ul><h2 id="use-v-two-ray-on-mac-osx"><a href="#use-v-two-ray-on-mac-osx" class="headerlink" title="use v[two]ray on mac osx"></a>use v[two]ray on mac osx</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p>download from <a href="https://github.com/jackleeforce/V2RayX/releases" target="_blank" rel="noopener">V2RayX</a></p><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><p><img src="../assets/images/image-20190609091022597.png" alt="image-20190609091022597"></p>]]></content>
      
      
      <categories>
          
          <category> 操作记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程儿童监控系统</title>
      <link href="/%E6%83%B3%E6%B3%95/2019-03-05-%E8%BF%9C%E7%A8%8B%E6%99%BA%E8%83%BD%E5%84%BF%E7%AB%A5%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F.html"/>
      <url>/%E6%83%B3%E6%B3%95/2019-03-05-%E8%BF%9C%E7%A8%8B%E6%99%BA%E8%83%BD%E5%84%BF%E7%AB%A5%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F.html</url>
      
        <content type="html"><![CDATA[<h2 id="远程智能儿童监控系统"><a href="#远程智能儿童监控系统" class="headerlink" title="远程智能儿童监控系统"></a>远程智能儿童监控系统</h2><h3 id="设计背景"><a href="#设计背景" class="headerlink" title="设计背景"></a>设计背景</h3><p>现代家庭中父母基本上是双职工，家里的儿童大多数时候由保姆或者爷爷奶奶辈照看，小朋友的顽皮以及活动特征的不可预测性时刻牵挂父母的心，通过现在互联网上的一些IOT产品（如小米摄像头，360摄像头等等），可以让父母很方便的实时查看家中的情况。但是父母也不可能时刻盯着监控画面看，需要在某些条件，某些场景下让父母收到系统通知，并立即播放现场直播画面，由父母选择后续操作。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><p>父母上班，儿童在家由其他人（如爷爷奶奶）照顾。</p><p>  ** 当检测到小朋友在当前区域内无人看管，立刻通知远端父母实时查看直播视频，与被监控端进行通话，安抚或者呼叫现场人员。 </p><ul><li><p>当检测到小朋友有摔倒或者哭泣等状况，立即通知远端父母进行查看等操作。</p></li><li><p>当检测到家中有陌生人进入，立即通知远端父母进行查看等操作。</p></li><li><p>系统中划分出一些危险区域，当检测到小朋友进入这些区域时，立即通知远端父母进行查看，呼叫等操作。</p></li></ul></li></ul><ul><li>儿童上幼儿园，父母希望在某些时刻查看自家小朋友的情况。</li></ul><h3 id="适用地点"><a href="#适用地点" class="headerlink" title="适用地点"></a>适用地点</h3><p>家庭，幼儿园</p><h3 id="配套硬件"><a href="#配套硬件" class="headerlink" title="配套硬件"></a>配套硬件</h3><p>摄像头，麦克风</p><h3 id="产品设计思路"><a href="#产品设计思路" class="headerlink" title="产品设计思路"></a>产品设计思路</h3><h3 id="功能详解"><a href="#功能详解" class="headerlink" title="功能详解"></a>功能详解</h3>]]></content>
      
      
      <categories>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能,想法,创意,产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十六课(决策树——既能分类又能回归的模型)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-22-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AF%BE-%E5%86%B3%E7%AD%96%E6%A0%91%E2%80%94%E2%80%94%E6%97%A2%E8%83%BD%E5%88%86%E7%B1%BB%E5%8F%88%E8%83%BD%E5%9B%9E%E5%BD%92%E7%9A%84%E6%A8%A1%E5%9E%8B.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-22-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AF%BE-%E5%86%B3%E7%AD%96%E6%A0%91%E2%80%94%E2%80%94%E6%97%A2%E8%83%BD%E5%88%86%E7%B1%BB%E5%8F%88%E8%83%BD%E5%9B%9E%E5%BD%92%E7%9A%84%E6%A8%A1%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><p>决策树是一种非常基础又常见的机器学习模型。</p><p>一棵决策树（Decision Tree）是一个树结构（可以是二叉树或非二叉树），每个非叶节点对应一个特征，该节点的每个分支代表这个特征的一个取值，而每个叶节点存放一个类别或一个回归函数。</p><p>使用决策树进行决策的过程就是从根节点开始，提取出待分类项中相应的特征，按照其值选择输出分支，依次向下，直到到达叶子节点，将叶子节点存放的类别或者回归函数的运算结果作为输出（决策）结果。</p><h4 id="构建决策树"><a href="#构建决策树" class="headerlink" title="构建决策树"></a>构建决策树</h4><ol><li><p>准备若干的训练数据（假设有 m 个样本）；</p></li><li><p>标明每个样本预期的类别；</p></li><li><p>人为选取一些特征（即决策条件）；</p></li><li><p>为每个训练样本对应所有需要的特征生成相应值——数值化特征；</p></li><li><p>将通过上面的1-4步获得的训练数据输入给训练算法，训练算法通过一定的原则，决定各个特征的重要性程度，然后按照决策重要性从高到底，生成决策树。</p></li></ol><h4 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h4><p><strong>一条信息的信息量和它的不确定性有着直接的关系，而信息熵就是用来衡量不确定性的程度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">熵：表示随机变量的不确定性。</span><br><span class="line">条件熵：在一个条件下，随机变量的不确定性。</span><br><span class="line">信息增益：熵 - 条件熵在一个条件下，信息不确定性减少的程度！</span><br><span class="line"></span><br><span class="line">通俗地讲，X(明天下雨)是一个随机变量，X的熵可以算出来， Y(明天阴天)也是随机变量，在阴天情况下下雨的信息熵我们如果也知道的话（此处需要知道其联合概率分布或是通过数据估计）即是条件熵。两者相减就是信息增益！原来明天下雨例如信息熵是2，条件熵是0.01（因为如果是阴天就下雨的概率很大，信息就少了），这样相减后为1.99，在获得阴天这个信息后，下雨信息不确定性减少了1.99！是很多的！所以信息增益大！也就是说，阴天这个信息对下雨来说是很重要的！所以在特征选择的时候常常用信息增益，如果IG（信息增益大）的话那么这个特征对于分类来说很关键~~ 决策树就是这样来找特征的！</span><br><span class="line"></span><br><span class="line">作者：卡伊粥</span><br><span class="line">链接：https://www.zhihu.com/question/22104055/answer/67014456</span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://zhuanlan.zhihu.com/p/26486223" target="_blank" rel="noopener">通俗理解信息熵</a></p><p><a href="https://zhuanlan.zhihu.com/p/26551798" target="_blank" rel="noopener">通俗理解条件熵</a></p><p><a href="https://www.zhihu.com/question/22104055" target="_blank" rel="noopener">信息增益到底怎么理解</a></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十五课(逻辑回归——用来做分类的回归模型)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-21-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E7%94%A8%E6%9D%A5%E5%81%9A%E5%88%86%E7%B1%BB%E7%9A%84%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-21-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E7%94%A8%E6%9D%A5%E5%81%9A%E5%88%86%E7%B1%BB%E7%9A%84%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="#### 逻辑回归"></a>#### 逻辑回归</h3><p>逻辑回归的模型函数 $ h_\theta(x) = \frac{1}{1+e^{-\theta^Tx}} ​$</p><p>逻辑回归的目标函数</p><p><img src="../assets/image-20190222111048824.png" alt="image-20190222111048824"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十四课(逻辑回归——非线性逻辑函数的由来)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E9%9D%9E%E7%BA%BF%E6%80%A7%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%B1%E6%9D%A5.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E9%9D%9E%E7%BA%BF%E6%80%A7%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%B1%E6%9D%A5.html</url>
      
        <content type="html"><![CDATA[<h4 id="逻辑回归-Logistic-Regression-（LR）"><a href="#逻辑回归-Logistic-Regression-（LR）" class="headerlink" title="逻辑回归 Logistic Regression （LR）"></a>逻辑回归 Logistic Regression （LR）</h4><p>逻辑回归的模型函数 $ h_\theta(x) = \frac{1}{1+e^{-\theta^Tx}} $</p><p><img src="../assets/image-20190221144340225.png" alt="image-20190221144340225"></p><h4 id="借助数学工具解决问题的方法"><a href="#借助数学工具解决问题的方法" class="headerlink" title="借助数学工具解决问题的方法"></a>借助数学工具解决问题的方法</h4><ul><li><p>首先，将目标问题定义为一个函数；</p></li><li><p>之后，选取最简单的假设作为其具体形式；</p></li><li><p>然后，用事实数据验证该形式，确认有效后沿用，形成数学模型；</p></li><li><p>一旦当前采用的数学模型出现问题，则对其进行修正（添加修正项），同样借助事实数据来求取修正项的形式，形成新的（升级版）数学模型。</p></li></ul><p><strong>直接、简单、基于现有成果</strong>——这也是人类在现实当中解决问题的各种有效方法的共同特征。</p><p>我们现在新面临的问题，有些此时尚未得到理想的 Solution。它们最终的解决，也必然遵循“直接、简单、基于现有成果”的原则。</p><p>“直接、简单”还比较抽象，但“现有成果”却是看得见摸得着的。</p><p>虽然随着新技术的发展，具体的新问题不断涌现，但实际上，技术发展的过程，整体而言是把问题的“量”扩大化的过程。</p><p>如果抽象层次更高一些，我们就不难发现，这些问题其实和以往的问题有许多共性所在。其实，新问题不过是旧问题在新情况、新场景下的变形而已。</p><p>既然如此，那些已经在实践中证明对于旧问题有效的方法、措施，也必然能够对解决新问题有所贡献。</p><p>还有，当一个方法应用到实践中去之后，在最初阶段有效是一种经验，随着经验的积累，研究者的深入探索，经验是有可能被提升为理论的。</p><p>理论相对于经验，更加清晰可描述、可解释；抽象层次更高，通用性更强，可以被应用到更广泛的领域。<strong>学习理论相对于学习经验具备更长久也更深入的有效性。</strong></p><p>这也就是时至今日我们还要学习几千年前的几何定理、几百年前的物理化学定律的缘故。</p><p>机器学习就是这样一套已经逐步在形成理论的方法。相比而言，更新的深度学习还处在经验阶段。</p><p>尽管今时今日从媒体传播的角度来看，深度学习是一个更热门的领域，对比起来，似乎机器学习“过时了”，“没用了”。</p><p>但在解决人们的实际问题上，机器学习的应用远比深度学习广泛、深入、可控。</p><p>而且，机器学习是深度学习的基础。如果连最简单的机器学习模型都没有掌握，又怎么可能了解深度神经网络的原理和运作？</p><p>如果连 How it works 都不知道，就拿来当黑盒使用，那么无论是什么工具，你对它的应用就变成了“按一下电钮”那么简单，你个人的价值又如何体现呢？</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十三课(朴素贝叶斯分类器——条件概率的参数估计)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-20-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E2%80%94%E2%80%94%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1.html</url>
      
        <content type="html"><![CDATA[<h4 id="极大似然估计-Maximum-Likelihood-Estimation-MLE"><a href="#极大似然估计-Maximum-Likelihood-Estimation-MLE" class="headerlink" title="极大似然估计 (Maximum Likelihood Estimation, MLE)"></a>极大似然估计 (Maximum Likelihood Estimation, MLE)</h4><h4 id="似然（Likelihood）"><a href="#似然（Likelihood）" class="headerlink" title="似然（Likelihood）"></a>似然（Likelihood）</h4><ul><li>似然指某种事件发生的可能，和概率相似。</li></ul><p>二者区别在于：概率用在已知参数的情况下，用来预测后续观测所得到的结果。似然则正相反，用于参数未知，但某些观测所得结果已知的情况，用来对参数进行估计。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十二课(朴素贝叶斯分类器——从贝叶斯定理到分类模型)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-19-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E2%80%94%E2%80%94%E4%BB%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86%E5%88%B0%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-02-19-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E2%80%94%E2%80%94%E4%BB%8E%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86%E5%88%B0%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B.html</url>
      
        <content type="html"><![CDATA[<h4 id="分类-VS-回归"><a href="#分类-VS-回归" class="headerlink" title="分类 VS 回归"></a>分类 VS 回归</h4><p><img src="../assets/images/006tKfTcly1g0bhmanbo5j31bw0nak79.jpg" alt></p><h4 id="分类模型-VS-回归模型"><a href="#分类模型-VS-回归模型" class="headerlink" title="分类模型 VS 回归模型"></a>分类模型 VS 回归模型</h4><p>最根本的不同：前者是预测一个标签（类型、类别）；后者则是预测一个量。</p><p>换一个角度来看，分类模型输出的预测值是离散值；而回归模型输出的预测值则是连续值。</p><p>也就是说输入一个样本给模型，回归模型给出的预测结果是在某个值域（一般是实数域或其子集）上的任意值；而分类模型则是给出特定的某几个离散值之一。</p><h4 id="先验概率和后验概率"><a href="#先验概率和后验概率" class="headerlink" title="先验概率和后验概率"></a><a href="https://zhuanlan.zhihu.com/p/38567891" target="_blank" rel="noopener">先验概率和后验概率</a></h4><ul><li><p>先验概率（prior probability）：指根据以往经验和分析。在实验或采样前就可以得到的概率。</p></li><li><p>后验概率（posterior probability）：指某件事已经发生，想要计算这件事发生的原因是由某个因素引起的概率。</p></li></ul><h4 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h4><p><img src="../assets/images/006tKfTcly1g0bhoaurgcj31dg066jsk.jpg" alt></p><h4 id="一般化的贝叶斯公式"><a href="#一般化的贝叶斯公式" class="headerlink" title="一般化的贝叶斯公式"></a>一般化的贝叶斯公式</h4><p><img src="../assets/images/006tKfTcly1g0biu8p76tj31ea08qq4u.jpg" alt></p><h4 id="简单的朴素贝叶斯分类器的模型函数"><a href="#简单的朴素贝叶斯分类器的模型函数" class="headerlink" title="简单的朴素贝叶斯分类器的模型函数"></a>简单的朴素贝叶斯分类器的模型函数</h4><p><img src="../assets/images/006tKfTcly1g0bkvcn4j5j30qa02ct8z.jpg" alt></p><p><img src="../assets/images/006tKfTcly1g0bkw3qtcaj31bg0h842t.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初等数学-相关概念记录</title>
      <link href="/%E6%95%B0%E5%AD%A6/2019-02-14-%E5%88%9D%E7%AD%89%E6%95%B0%E5%AD%A6-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E8%AE%B0%E5%BD%95.html"/>
      <url>/%E6%95%B0%E5%AD%A6/2019-02-14-%E5%88%9D%E7%AD%89%E6%95%B0%E5%AD%A6-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E8%AE%B0%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="初等数学"><a href="#初等数学" class="headerlink" title="初等数学"></a>初等数学</h1><h2 id="有理数无理数"><a href="#有理数无理数" class="headerlink" title="有理数无理数"></a><a href="https://www.shuxuele.com/irrational-numbers.html" target="_blank" rel="noopener">有理数无理数</a></h2><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><img src="../assets/images/006tKfTcly1g06bdpxrwij30g80beaat.jpg" alt></p><h3 id="特殊角度的三角函数值表"><a href="#特殊角度的三角函数值表" class="headerlink" title="特殊角度的三角函数值表"></a>特殊角度的三角函数值表</h3><p><img src="../assets/images/006tKfTcly1g0ajpd019wj30e706igmp.jpg" alt></p><h3 id="正弦"><a href="#正弦" class="headerlink" title="正弦"></a>正弦</h3><p>sinΦ = 对边/斜边</p><h4 id="正弦定理"><a href="#正弦定理" class="headerlink" title="正弦定理"></a>正弦定理</h4><p><img src="../assets/images/006tKfTcgy1g06bnf2367j30za0rmdk4.jpg" alt></p><h4 id="正弦函数图像"><a href="#正弦函数图像" class="headerlink" title="正弦函数图像"></a>正弦函数图像</h4><p><img src="../assets/images/image-20190220153921694.png" alt></p><h3 id="余弦"><a href="#余弦" class="headerlink" title="余弦"></a>余弦</h3><p>cosΦ = 邻边/斜边</p><h4 id="余弦定理"><a href="#余弦定理" class="headerlink" title="余弦定理"></a>余弦定理</h4><p>三角形中任何一边的平方 = 其它两边的平方和减去这两边与它们的夹角的余弦的积的两倍。</p><p>$$<br>a^2 = b^2 + c^2 – 2bc  * cosA<br>$$</p><p>$$<br>b^2 = a^2 + c^2 –2ac  * cosB<br>$$</p><p>$$<br>c^2 = a^2 + b^2 – 2ab  * cosC<br>$$</p><p><img src="../assets/images/image-20190220161324089.png" alt="image-20190220161324089"></p><h4 id="余弦函数图像"><a href="#余弦函数图像" class="headerlink" title="余弦函数图像"></a>余弦函数图像</h4><p><img src="../assets/images/image-20190220154322852.png" alt="image-20190220154322852"></p><ul><li>cos x = sin (x + π/2)，即余弦函数的图像等于正弦函数向左平移 π/2 个单位长度。</li></ul><h3 id="正弦余弦函数图像动画"><a href="#正弦余弦函数图像动画" class="headerlink" title="正弦余弦函数图像动画"></a>正弦余弦函数图像动画</h3><iframe height="498" width="510" src="../assets/videos/sin_cos.mp4"></iframe><h3 id="正切"><a href="#正切" class="headerlink" title="正切"></a>正切</h3><p>tanΦ = 对边/邻边 = sinΦ/cosΦ</p><h3 id="余切"><a href="#余切" class="headerlink" title="余切"></a>余切</h3><h3 id="正割"><a href="#正割" class="headerlink" title="正割"></a>正割</h3><h3 id="余割"><a href="#余割" class="headerlink" title="余割"></a>余割</h3><h3 id="反正弦"><a href="#反正弦" class="headerlink" title="反正弦"></a>反正弦</h3><h3 id="反余弦"><a href="#反余弦" class="headerlink" title="反余弦"></a>反余弦</h3><h3 id="反正切"><a href="#反正切" class="headerlink" title="反正切"></a>反正切</h3><h3 id="反余切"><a href="#反余切" class="headerlink" title="反余切"></a>反余切</h3><h2 id="欧拉常数e"><a href="#欧拉常数e" class="headerlink" title="欧拉常数e"></a><span id="Aura"><a href="https://www.shuxuele.com/numbers/e-eulers-number.html" target="_blank" rel="noopener">欧拉常数e</a></span></h2><h2 id="指数和对数"><a href="#指数和对数" class="headerlink" title="指数和对数"></a><a href="https://www.shuxuele.com/algebra/exponents-logarithms.html" target="_blank" rel="noopener">指数和对数</a></h2><p>$$<br>log_a(a^x) = x<br>$$</p><p>$$<br>a^{log_ax} = x<br>$$</p><p>$$<br>log_a{(m * n)} = log_am + log _an<br>$$</p><p>$$<br>log_a{(m / n)} = log_am - log_an<br>$$</p><p>$$<br>log_a{(1/n)} = -log_an<br>$$</p><p>$$<br>log_a{(m^r)} = r(log_am)<br>$$</p><p>$$<br>log_ax = \frac{log_bx}{log_ba}<br>$$</p><p>$$<br>log_ax = \frac{1}{log_xa}<br>$$</p><h4 id="自然指数和自然对数"><a href="#自然指数和自然对数" class="headerlink" title="自然指数和自然对数"></a>自然指数和自然对数</h4><ul><li><p>底是 <a href="#Aura">欧拉常数e</a> 的指数叫做自然指数,表示为 $e^x$</p></li><li><p>底是 <a href="#Aura">欧拉常数e</a> 的对数叫做自然对数，表示为 $ln(x)$</p><p><img src="../assets/images/image-20190221094826619.png" alt="image-20190221094826619"></p></li></ul><h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p><img src="../assets/images/006tKfTcgy1g062lwzogdj30d001474g.jpg" alt></p><h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><p><img src="../assets/images/006tKfTcgy1g062mbl2t9j30qk013wf2.jpg" alt></p><h2 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h2><p><img src="../assets/images/006tKfTcly1g062lj1e28j30cb01774h.jpg" alt></p><h3 id="幂函数运算"><a href="#幂函数运算" class="headerlink" title="幂函数运算"></a>幂函数运算</h3><h4 id="同底数幂函数运算"><a href="#同底数幂函数运算" class="headerlink" title="同底数幂函数运算"></a>同底数幂函数运算</h4><h4 id="同指数幂函数运算"><a href="#同指数幂函数运算" class="headerlink" title="同指数幂函数运算"></a>同指数幂函数运算</h4><p>## </p><h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><p><a href="https://www.shuxuele.com/algebra/binomial-theorem.html" target="_blank" rel="noopener">最容易理解的二项式定理解释</a></p><h3 id="二项式展开与二项式系数"><a href="#二项式展开与二项式系数" class="headerlink" title="二项式展开与二项式系数"></a>二项式展开与二项式系数</h3><p><img src="../assets/images/006tNc79gy1g05pb8gww8j318c0ky41r.jpg" alt></p><ul><li>二项式系数等式</li></ul><p><img src="../assets/images/006tKfTcly1g05xkzwbz4j308p029mx2.jpg" alt></p><p>其中“!”代表 <a href="https://www.shuxuele.com/numbers/factorial.html" target="_blank" rel="noopener">阶乘</a>，例如 4！= 4*3*2*1 = 24</p><p>## </p><h2 id="充分条件，必要条件"><a href="#充分条件，必要条件" class="headerlink" title="充分条件，必要条件"></a>充分条件，必要条件</h2><ul><li>假设 A 是条件，B 是结论: </li><li>由 A 可以推出B,由 B 可以推出A，则A是B的充要条件（充分且必要条件）。 </li><li>由 A 可以推出B,由 B 不可以推出A，则A是B的充分不必要条件。 </li><li>由 A 不可以推出 B, 由 B 可以推出A，则A是B的必要不充分条件。 </li><li>由 A 不可以推出 B, 由 B 不可以推出A，则A是B的不充分不必要条件。 </li><li>简单一点就是：由条件能推出结论，但由结论推不出这个条件，这个条件就是充分条件。 </li><li>如果能由结论推出条件，但由条件推不出结论,此条件为必要条件。 </li><li>如果既能由结论推出条件，又能有条件推出结论,此条件为充要条件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学(同济大学第七版)学习笔记-第二章-导数与微分</title>
      <link href="/%E6%95%B0%E5%AD%A6/2019-02-13-%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%B8%83%E7%89%88)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86.html"/>
      <url>/%E6%95%B0%E5%AD%A6/2019-02-13-%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E7%AC%AC%E4%B8%83%E7%89%88)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="导数与微分"><a href="#导数与微分" class="headerlink" title="导数与微分"></a>导数与微分</h1><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p><img src="../assets/images/006tKfTcgy1g076b3nrg8j315m0gb41f.jpg" alt></p><p><img src="../assets/images/006tKfTcgy1g076gyjstbj314n06bdgq.jpg" alt></p><h3 id="导函数"><a href="#导函数" class="headerlink" title="导函数"></a>导函数</h3><p><img src="../assets/images/006tKfTcgy1g076h31f0rj31620l5djf.jpg" alt><br><img src="../assets/images/006tKfTcgy1g076io14cwj316008awfj.jpg" alt></p><h3 id="特殊函数的导数公式"><a href="#特殊函数的导数公式" class="headerlink" title="特殊函数的导数公式"></a>特殊函数的导数公式</h3><h4 id="幂函数的导数公式"><a href="#幂函数的导数公式" class="headerlink" title="幂函数的导数公式"></a>幂函数的导数公式</h4><p>幂函数f(x) = x<sup>n</sup> (n ϵ R ) 的导数公式：</p><p>(x<sup>n</sup>)<sup>‘</sup> = nx<sup>n-1</sup></p><h4 id="三角函数的导数公式"><a href="#三角函数的导数公式" class="headerlink" title="三角函数的导数公式"></a>三角函数的导数公式</h4><ul><li><p>正弦函数 f(x) = sin x  的导数公式</p><ul><li><p>(sin x)<sup>‘</sup> = cos x</p><p>即正弦函数的导数是余弦函数。</p></li></ul></li><li><p>余弦函数 f(x) = cos x  的导数公式：</p><ul><li><p>(cos x)<sup>‘</sup> = -sina x</p><p>即余弦函数的导数是负的正弦函数。</p></li></ul></li><li><p>正切函数 f(x) = tan x 的导数公式：</p><ul><li>(tan x)<sup>‘</sup> = sec<sup>2</sup>x</li></ul></li><li><p>余切函数 f(x) = cot x 的导数公式：</p><ul><li>(cot x)<sup>‘</sup> = - csc<sup>2</sup>x </li></ul></li><li><p>正割函数 f(x) = sec x 的导数公式：</p><ul><li>(sec x)<sup>‘</sup> = sec x * tan x</li></ul></li><li><p>余割函数 f(x) = csc x 的导数公式：</p><ul><li>(csc x)<sup>‘</sup> = - csc x * cot x</li></ul></li><li><p>反正弦函数 f(x) = arcsinx x 的导数公式：</p></li></ul><p><img src="../assets/images/006tKfTcgy1g076h6y89pj30xw03qq2u.jpg" alt></p><ul><li>反余弦函数 f(x) = arccos x 的导数公式：</li></ul><p><img src="../assets/images/006tKfTcgy1g076h9etdbj30q603umx2.jpg" alt></p><ul><li>反正切函数 f(x) = arctan x 的导数公式：</li></ul><p><img src="../assets/images/006tKfTcgy1g076hbuzcmj30ny03c745.jpg" alt></p><ul><li>反余切函数 f(x) = arccot x 的导数公式：</li></ul><p><img src="../assets/images/006tKfTcgy1g076hegnf8j30p603ejr9.jpg" alt></p><h4 id="指数函数的导数公式"><a href="#指数函数的导数公式" class="headerlink" title="指数函数的导数公式"></a>指数函数的导数公式</h4><p>指数函数f(x) = a<sup>x</sup> (a&gt;0,a≠1)的导数公式:</p><p><img src="../assets/images/006tKfTcgy1g076hhs0ytj312q06cjry.jpg" alt></p><h4 id="对数函数的导数公式"><a href="#对数函数的导数公式" class="headerlink" title="对数函数的导数公式"></a>对数函数的导数公式</h4><p>对数函数f(x) = log<sub>a</sub>x (a&gt;0,a≠1)的导数公式:</p><p><img src="../assets/images/006tKfTcgy1g076hk9t90j31dm0aiq3s.jpg" alt></p><h3 id="导数的几何意义"><a href="#导数的几何意义" class="headerlink" title="导数的几何意义"></a>导数的几何意义</h3><p><img src="../assets/images/006tKfTcgy1g076hn20abj314g0u0gqa.jpg" alt></p><h3 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h3><h4 id="函数的和，差，积，商的求导法则"><a href="#函数的和，差，积，商的求导法则" class="headerlink" title="函数的和，差，积，商的求导法则"></a>函数的和，差，积，商的求导法则</h4><p><img src="../assets/images/006tKfTcgy1g076hs900rj31b40bs405.jpg" alt></p><h4 id="反函数的求导法则"><a href="#反函数的求导法则" class="headerlink" title="反函数的求导法则"></a>反函数的求导法则</h4><p><img src="../assets/images/006tKfTcgy1g076hv4fr3j31bg098dgu.jpg" alt></p><ul><li>即反函数的导数等于直接函数导数的倒数。</li></ul><h4 id="复合函数的求导法则"><a href="#复合函数的求导法则" class="headerlink" title="复合函数的求导法则"></a>复合函数的求导法则</h4><p><img src="../assets/images/006tKfTcgy1g076hy586sj31d00723zg.jpg" alt><br><img src="../assets/images/006tKfTcgy1g076j5fi0uj31bc080wgn.jpg" alt></p><h3 id="基本初等函数的导数公式总结："><a href="#基本初等函数的导数公式总结：" class="headerlink" title="基本初等函数的导数公式总结："></a>基本初等函数的导数公式总结：</h3><p><img src="../assets/images/006tKfTcgy1g076i0o7afj30u00xxdj1.jpg" alt></p><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><p><img src="../assets/images/006tKfTcgy1g076i4uh6fj31cw0u0wjs.jpg" alt></p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p><img src="../assets/images/006tKfTcgy1g076i7mnl5j31cr0u041y.jpg" alt></p><h3 id="微分的几何意义"><a href="#微分的几何意义" class="headerlink" title="微分的几何意义"></a>微分的几何意义</h3><p><img src="../assets/images/006tKfTcgy1g076ialmgyj31840u0teu.jpg" alt></p><h3 id="基本初等函数的微分公式"><a href="#基本初等函数的微分公式" class="headerlink" title="基本初等函数的微分公式"></a>基本初等函数的微分公式</h3><p><img src="../assets/images/006tKfTcgy1g076til6x3j31n609q0wj.jpg" alt></p><p><img src="../assets/images/006tKfTcgy1g076uaa8gbj312v0u0av7.jpg" alt></p><p><img src="../assets/images/006tKfTcgy1g076uts9iej31na03uac2.jpg" alt></p><h3 id="函数和，差，积，商的积分法则"><a href="#函数和，差，积，商的积分法则" class="headerlink" title="函数和，差，积，商的积分法则"></a>函数和，差，积，商的积分法则</h3><p><img src="../assets/images/006tKfTcly1g0774zu78oj31n20gc7da.jpg" alt></p><h3 id="复合函数的微分法则"><a href="#复合函数的微分法则" class="headerlink" title="复合函数的微分法则"></a>复合函数的微分法则</h3><p><img src="../assets/images/006tKfTcly1g0779xuog7j31o80kcdyj.jpg" alt></p><h2 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h2><h4 id="费马引理"><a href="#费马引理" class="headerlink" title="费马引理"></a>费马引理</h4><p><img src="../assets/images/image-20190225140815451.png" alt="image-20190225140815451"></p><h4 id="罗尔定理"><a href="#罗尔定理" class="headerlink" title="罗尔定理"></a>罗尔定理</h4><p><img src="../assets/images/image-20190225142940264.png" alt="image-20190225142940264"></p><h4 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h4><p><img src="../assets/images/image-20190225145839109.png" alt="image-20190225145839109"></p><h5 id="拉格朗日中值定理的几何意义"><a href="#拉格朗日中值定理的几何意义" class="headerlink" title="拉格朗日中值定理的几何意义"></a>拉格朗日中值定理的几何意义</h5><p><img src="../assets/images/image-20190225150408590.png" alt="image-20190225150408590"></p><p><img src="../assets/images/image-20190225155625620.png" alt="image-20190225155625620"></p><h4 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h4><p><img src="../assets/images/image-20190225162538307.png" alt="image-20190225162538307"></p><h2 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h2><p><img src="../assets/images/image-20190225162947986.png" alt="image-20190225162947986"></p><p><img src="../assets/images/image-20190225215204263.png" alt="image-20190225215204263"></p><h4 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h4><p><img src="../assets/images/image-20190225220000609.png" alt="image-20190225220000609"></p><p><img src="../assets/images/image-20190225220312418.png" alt="image-20190225220312418"></p><h4 id="函数的单调性"><a href="#函数的单调性" class="headerlink" title="函数的单调性"></a>函数的单调性</h4><h4 id><a href="#" class="headerlink" title></a><img src="../assets/images/image-20190225221015562.png" alt="image-20190225221015562"></h4><h4 id="曲线的凹凸性"><a href="#曲线的凹凸性" class="headerlink" title="曲线的凹凸性"></a>曲线的凹凸性</h4><p><img src="../assets/images/image-20190225221715871.png" alt="image-20190225221715871"></p><p><img src="../assets/images/image-20190225221405367.png" alt="image-20190225221405367"></p><h4 id="函数的极值与最大值最小值"><a href="#函数的极值与最大值最小值" class="headerlink" title="函数的极值与最大值最小值"></a>函数的极值与最大值最小值</h4><ul><li><p>当函数取极大值和极小值时，函数在这两个点的导数值等于0。</p><ul><li>当函数在该点的二阶导数为正时，函数取极小值。</li><li>当函数在该点的二阶导数为负时，函数取极大值。</li><li>当函数在该点的二阶导数为0时，该点称为函数的拐点。</li></ul></li><li><p>微积分中的大部分问题，都可以令其导数值为0来求解。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十一课(线性回归——梯度下降法求解目标函数)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%B1%82%E8%A7%A3%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%B1%82%E8%A7%A3%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="待复习偏微分"><a href="#待复习偏微分" class="headerlink" title="待复习偏微分"></a>待复习偏微分</h2>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第十课(线性回归——从模型函数到目标函数)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E4%BB%8E%E6%A8%A1%E5%9E%8B%E5%87%BD%E6%95%B0%E5%88%B0%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%8D%81%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E2%80%94%E2%80%94%E4%BB%8E%E6%A8%A1%E5%9E%8B%E5%87%BD%E6%95%B0%E5%88%B0%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h4 id="线性回归模型目标函数的一般形式"><a href="#线性回归模型目标函数的一般形式" class="headerlink" title="线性回归模型目标函数的一般形式"></a>线性回归模型目标函数的一般形式</h4><p><img src="../assets/images/006tNc79gy1fzmb3efunij30m401nq31.jpg" alt></p><p>上图公式中m为样本个数,y为样本真实标签值(如预测年薪与工作年份关系问题中的真实年薪）。</p><p>在 y = a + bx 这个模型函数中，a 和 b 是常量参数，x 是自变量，而 y 是因变量。</p><p>但到了 J(a,b) 中，x<sup>(i)</sup> 和 y<sup>(i)</sup>是常量参数（也就是 m 个样本各自的 x 和 y 值），而 a 和 b 成了自变量，J(a,b) 是因变量。能够让因变量 J(a, b) 取值最小的自变量 a 和 b，就是最好的 a 和 b。</p><p>我们要做的，就是找到最好的 a 和 b。</p><h4 id="多项式的阶"><a href="#多项式的阶" class="headerlink" title="多项式的阶"></a>多项式的阶</h4><p>多项式最高次项的幂次，就是多项式的次数(阶数)。</p><p>如下是一个二元四阶多项式：</p><p><img src="../assets/images/006tNc79ly1fzma4k26rnj30ab01w748.jpg" alt></p><h4 id="线性函数"><a href="#线性函数" class="headerlink" title="线性函数"></a>线性函数</h4><p>一阶（或更低阶）多项式，或零多项式。</p><h4 id="特征与线性模型之间的关系"><a href="#特征与线性模型之间的关系" class="headerlink" title="特征与线性模型之间的关系"></a>特征与线性模型之间的关系</h4><p>直角坐标系中，除了平行于 y 轴的那些直线之外，所有的直线都可以对应一个一维特征（自变量）的线性回归模型(一元多项式函数)。</p><p>但如果样本特征本身是多维的，则最终的线性模型函数是一个多维空间内的[一阶|零阶|零]多项式。</p><p>总结一下：特征是一维的，线性模型在二维空间构成一条直线；特征是二维的，线性模型在三维空间中构成一个平面；若特征是三维的，则最终模型在四维空间中构成一个体，以此类推。</p><h4 id="用线性回归模型拟合非线性关系"><a href="#用线性回归模型拟合非线性关系" class="headerlink" title="用线性回归模型拟合非线性关系"></a>用线性回归模型拟合非线性关系</h4><p>可以通过多项式代替的方式将非线性关系（如多阶多元多项式）拟合为线性关系模型（线性函数）。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第九课(最常用的优化算法——梯度下降法)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B9%9D%E8%AF%BE-%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-28-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B9%9D%E8%AF%BE-%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h4 id="目标函数，损失函数，代价函数"><a href="#目标函数，损失函数，代价函数" class="headerlink" title="目标函数，损失函数，代价函数"></a>目标函数，损失函数，代价函数</h4><p><a href="https://www.zhihu.com/question/52398145" target="_blank" rel="noopener">机器学习中的目标函数、损失函数、代价函数有什么区别</a></p><h4 id="凸函数"><a href="#凸函数" class="headerlink" title="凸函数"></a>凸函数</h4><ul><li>同济大学高等数学定义</li></ul><p>设 f(x) 在区间 I 上连续，如果对 I 上任意两点 x_1,x_2 ，恒有<br><img src="../assets/images/006tNc79ly1fzm5cg0apyj30go01nq33.jpg" alt></p><p>那么称 f(x) 在 I 上的图形是（向上）凹的（或凹弧）；如果恒有<br><img src="../assets/images/006tNc79ly1fzm5dm8d45j30go01nq33.jpg" alt></p><p>那么称 f(x) 在 I 上的图形是（向上）凸的（或凸弧）。</p><p>这个定义是直接从几何直观上得来的。如果在曲线弧上面任意取两点，连接这两点的弦总是在弧段的上方，那么曲线就是（向上）凹的，反之也有可类比的结论。取一个特殊的点，即弦的中点，曲线的凹凸性可以用弦的中点与曲线弧上具有相同坐标的点的位置关系来描述。<br><img src="../assets/images/006tNc79ly1fzm5epe4q9j30d705s3z3.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前人的工作已经保证了经典机器学习模型的目标函数都是凸函数。未来在应用中构建自己的目标函数，那么千万记得在直接应用任何优化算法之前，应该先确定它是凸函数。</span><br></pre></td></tr></table></figure><h4 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h4><p>算法不能学习，需要人为设定的参数，就叫做超参数。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第八课(模型的质量和评判指标)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AB%E8%AF%BE-%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B4%A8%E9%87%8F%E5%92%8C%E8%AF%84%E5%88%A4%E6%8C%87%E6%A0%87.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AB%E8%AF%BE-%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B4%A8%E9%87%8F%E5%92%8C%E8%AF%84%E5%88%A4%E6%8C%87%E6%A0%87.html</url>
      
        <content type="html"><![CDATA[<h3 id="分类模型的评判指标"><a href="#分类模型的评判指标" class="headerlink" title="分类模型的评判指标"></a>分类模型的评判指标</h3><h4 id="精准率-查准率（Precision）"><a href="#精准率-查准率（Precision）" class="headerlink" title="精准率/查准率（Precision）"></a>精准率/查准率（Precision）</h4><p>Precision=TP/（TP+FP），即在所有被预测为 Class_A 的测试数据中，预测正确的比率。</p><p>如&lt;&lt;机器学习&gt;&gt;(周志华)中的描述，对一堆西瓜进行分类为好瓜和坏瓜，希望选出来认为是好瓜的准确率尽可能高，则这个概念叫精准率/查准率。</p><h4 id="召回率-查全率（Recall）"><a href="#召回率-查全率（Recall）" class="headerlink" title="召回率/查全率（Recall）"></a>召回率/查全率（Recall）</h4><p>Recall=TP/（TP+FN），即在所有实际为 Class_A 的测试数据中，预测正确的比率。</p><p>如&lt;&lt;机器学习&gt;&gt;(周志华)中的描述，对一堆西瓜进行分类为好瓜和坏瓜，希望尽可能的选出里面所有的好瓜，则个概念叫召回率/查全率</p><h4 id="F1Score"><a href="#F1Score" class="headerlink" title="F1Score"></a>F1Score</h4><p>F1Score = 2<em>(Precision </em> Recall)/(Precision + Recall)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此处需要注意，P、R、F1Score 在分类问题中都是对某一个分类而言的。如针对一堆西瓜中的好瓜，有P,R,F1Score。对一堆西瓜中的熟瓜，也有P,R,F1Score。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">假设一个模型总共可以分10个类，那么对于每一个类都有一套独立的 P、R、F1Score 的值。衡量模型整体质量，要综合看所有10套指标，而不是只看一套。</span><br></pre></td></tr></table></figure><h4 id="TP"><a href="#TP" class="headerlink" title="TP"></a>TP</h4><p>True Positive</p><h4 id="TN"><a href="#TN" class="headerlink" title="TN"></a>TN</h4><p>True Negative</p><h4 id="FP"><a href="#FP" class="headerlink" title="FP"></a>FP</h4><p>False Positive</p><h4 id="FN"><a href="#FN" class="headerlink" title="FN"></a>FN</h4><p>False Positive</p><h4 id="欠拟合（Underfitting）"><a href="#欠拟合（Underfitting）" class="headerlink" title="欠拟合（Underfitting）"></a>欠拟合（Underfitting）</h4><p>如果一个模型，在训练集上的预测结果就不佳，指标偏低，那一般是欠拟合的问题。</p><p>欠拟合多数情况下是因为选定模型类型太过简单，特征选取不够导致的</p><h4 id="过拟合（Overfitting）"><a href="#过拟合（Overfitting）" class="headerlink" title="过拟合（Overfitting）"></a>过拟合（Overfitting）</h4><p>训练过程中为了尽可能命中训练集所有标签，导致最后训练出来的模型对训练集的验证误差率很低，但是当使用该模型运用在其他验证集或者测试集上时，该模型的误差率陡然增高的现象。</p><p>过拟合则可能是模型太过复杂，特征选择不当（过多或组合不当）造成的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无论是过拟合问题还是欠拟合问题，增大训练数据量都可能会有所帮助。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第七课(模型的获取和改进)</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E8%AF%BE-%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E6%94%B9%E8%BF%9B.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E8%AF%BE-%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E6%94%B9%E8%BF%9B.html</url>
      
        <content type="html"><![CDATA[<h4 id="构建模型的一般步骤"><a href="#构建模型的一般步骤" class="headerlink" title="构建模型的一般步骤"></a><span id="BuildModel">构建模型的一般步骤</span></h4><ul><li><p>Step-1：数据准备。</p><ul><li>Step-1.1 数据预处理：收集数据、清洗数据、标注数据。</li><li>Step-1.2 构建数据的向量空间模型（将文本、图片、音频、视频等格式的数据转换为向量）。</li><li>Step-1.3 将构建好向量空间模型的数据分为训练集、验证集和测试集。</li></ul></li><li><p><span id="Step2">Step-2</span>：训练——将训练集输入给训练程序，进行运算。训练程序的核心是算法，所有输入的向量化数据都会按该训练程序所依据的算法进行运算。训练程序输出的结果，就是模型。</p></li><li><p>Step-3：测试——将测试集数据输入给训练获得的模型，得到预测结果；再将预测结果与这些数据原本预期的结果进行比较。</p></li></ul><h4 id="有监督学习过程中对数据集的划分"><a href="#有监督学习过程中对数据集的划分" class="headerlink" title="有监督学习过程中对数据集的划分"></a>有监督学习过程中对数据集的划分</h4><ul><li><p>训练集（Train Set）：用来做训练的数据的集合。</p></li><li><p>验证集（Validation Set）：在训练的过程中，每个训练轮次结束后用来验证当前模型性能，为进一步优化模型提供参考的数据的集合。</p></li><li><p>测试集（Test Set）：用来测试的数据的集合，用于检验最终得出的模型的性能。</p></li></ul><p>每个集合都应当是独立的，和另外两个没有重叠。</p><p>训练集是训练过程的基础，而验证和测试集则是在不同阶段用来评价训练结果的。</p><h4 id="训练的过程"><a href="#训练的过程" class="headerlink" title="训练的过程"></a>训练的过程</h4><p><a href="#BuildModel">构建模型的</a>过程中<a href="#Step2">Step-2</a>训练，又可以细化为几个步骤。</p><ul><li><p>Step-2.1： 编写训练程序。</p><ul><li>Step-2.1.1： 选择模型类型；</li><li>Step-2.1.2： 选择优化算法；</li><li>Step-2.1.3： 根据模型类型和算法编写程序。</li></ul></li><li><p>Step-2.2： 训练 -&gt; 获得临时模型。</p></li><li><p>Step-2.3： 在训练集上运行临时模型，获得训练集预测结果。</p></li><li><p>Step-2.4： 在验证集上运行临时模型，获得验证集预测结果。</p></li><li><p>Step-2.5： 综合参照 Step-2.3 和 Step-2.4 的预测结果，改进模型。</p></li><li><p>Step-2.6： Step-2.2 到 Step-2.5 反复迭代，直至获得让我们满意，或者已经无法继续优化的模型。</p></li></ul><h4 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h4><p>超参数是需要模型训练者自己来设置和调整的。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习极简入门课学习笔记-第六课（机器学习三要素之数据、模型、算法）</title>
      <link href="/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E8%AF%BE%EF%BC%88%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%89%E8%A6%81%E7%B4%A0%E4%B9%8B%E6%95%B0%E6%8D%AE%E3%80%81%E6%A8%A1%E5%9E%8B%E3%80%81%E7%AE%97%E6%B3%95%EF%BC%89.html"/>
      <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2019-01-25-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8%E8%AF%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E8%AF%BE%EF%BC%88%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%89%E8%A6%81%E7%B4%A0%E4%B9%8B%E6%95%B0%E6%8D%AE%E3%80%81%E6%A8%A1%E5%9E%8B%E3%80%81%E7%AE%97%E6%B3%95%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h4 id="向量空间模型-Vector-Space-Model，VSM"><a href="#向量空间模型-Vector-Space-Model，VSM" class="headerlink" title="向量空间模型(Vector Space Model，VSM)"></a>向量空间模型(Vector Space Model，VSM)</h4><ul><li>向量指一个同时具有大小和方向的几何對象。</li><li>向量空间模型负责将格式（文字、图片、音频、视频）转化为一个个向量，即将真实世界里的各种对象转换为计算机可以识别的数值。</li></ul><h4 id="特征向量-Feature-Vector"><a href="#特征向量-Feature-Vector" class="headerlink" title="特征向量(Feature Vector)"></a>特征向量(Feature Vector)</h4><p>描述一份样本数据中所有的特征所转换出来的向量叫做这份数据的特征向量</p><h4 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h4><p>特征工程，包括以下两个步骤：</p><ol><li>确定用哪些特征来表示数据；</li><li>确定用什么方式表达这些特征。</li></ol><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>模型是机器学习的结果，这个学习过程，称为训练（Train）。</p><p>一个已经训练好的模型，可以被理解成一个函数： y=f(x)。</p><p>我们把数据（对应其中的 x）输入进去，得到输出结果（对应其中的 y）。</p><p>这个输出结果可能是一个数值（回归），也可能是一个标签（分类），它会告诉我们一些事情。</p><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>训练就是：根据已经被指定的模型类型，结合训练数据，计算出其中各个参数的具体取值的过程。</p><h4 id="损失函数（Loss-Function）"><a href="#损失函数（Loss-Function）" class="headerlink" title="损失函数（Loss Function）"></a>损失函数（Loss Function）</h4><p>在有监督学习过程中，经过对一份训练数据的学习后，得到一个模型y‘=f(x)，再对另外一份验证数据运用这个模型计算出来得到的标签值y’与验证数据正确的标签y的差别，记做L（y, y’）= L(y, f(x))。</p><h4 id="代价函数（Cost-Function）"><a href="#代价函数（Cost-Function）" class="headerlink" title="代价函数（Cost Function）"></a>代价函数（Cost Function）</h4><p>代价函数一般写作：J（theta）。<br>???</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习,人工智能,AI,学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Android利用AIDL实现进程间通信</title>
      <link href="/Android-Development/2016-08-30-%E8%AF%A6%E8%A7%A3Android%E5%88%A9%E7%94%A8AIDL%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.html"/>
      <url>/Android-Development/2016-08-30-%E8%AF%A6%E8%A7%A3Android%E5%88%A9%E7%94%A8AIDL%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是AIDL？"><a href="#什么是AIDL？" class="headerlink" title="什么是AIDL？"></a>什么是AIDL？</h2><p>AIDL是 Android Interface definition language的缩写，是Android的一种接口定义语言。通过它我们可以定义在Android上实现进程间通信的接口,在ADT和AS中会自动为我们写好的AIDL文件生成JAVA代码。<br>在Android中，为了实现进程间访问需要把复杂对象分解成操作系统可以理解的基本数据类型，在跨过进程边界后再组合成对象，实现组合成对象的代码单调又难于开发，好在Android为我们提供了AIDL处理这些功能。</p><h2 id="什么场合下用AIDL？"><a href="#什么场合下用AIDL？" class="headerlink" title="什么场合下用AIDL？"></a>什么场合下用AIDL？</h2><p>直接看官方指南:<a href="https://developer.android.com/guide/components/aidl.html的这段话：" target="_blank" rel="noopener">https://developer.android.com/guide/components/aidl.html的这段话：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Note: Using AIDL is necessary only if you allow clients from different applications </span><br><span class="line">to access your service for IPC and want to handle multithreading in your service. </span><br><span class="line">If you do not need to perform concurrent IPC across different applications, you </span><br><span class="line">should create your interface by implementing a Binder or, if you want to perform </span><br><span class="line">IPC, but do not need to handle multithreading, implement your interface using a </span><br><span class="line">Messenger.</span><br></pre></td></tr></table></figure><p>只有在你允许多个应用程序访问你提供的服务进行进程间通信，并且在提供的服务中涉及到多线程处理的时候才需要使用到AIDL。如果你无需处理多应用并发通信，你应该采用Binder进行进程间通信。如果你实现的进程间通信未涉及多线程处理，你需要采用Messenger进行进程间通信。<br>一般适用于为其它应用程序提供公共服务的Service，这种Service即为系统常驻的Service(如：天气服务，日历服务等)。</p><h2 id="选择AIDL进行进程间通信有什么优缺点"><a href="#选择AIDL进行进程间通信有什么优缺点" class="headerlink" title="选择AIDL进行进程间通信有什么优缺点?"></a>选择AIDL进行进程间通信有什么优缺点?</h2><p>优点:<br>1.AIDL有自己的独立进程，不会受到其它进程的影响；<br>2.可以被其它进程复用，提供公共服务；<br>3.具有很高的灵活性。<br>4.相比Messenger,可以传输的数据量大。<br>缺点:<br>1.相对普通服务，占用系统资源较多，使用AIDL进行IPC也相对麻烦。</p><h2 id="AIDL如何使用？"><a href="#AIDL如何使用？" class="headerlink" title="AIDL如何使用？"></a>AIDL如何使用？</h2><p>既然用AIDL的最终目标是进行不同进程间通信，那这里咱们搞两个APP，一个Server,提供一个Service，用来对传入的参数做加法运算，另外一个Client,调用Server提供的Service。</p><h3 id="Server端实现"><a href="#Server端实现" class="headerlink" title="Server端实现"></a>Server端实现</h3><p>1.建立一个工程，命名:AIDLServer<br>2.新建AIDL文件,命名:IMyAidlInterface<br><img src="../assets/images/Create_AIDL_File.png" alt><br>3.生成后如图2，可以看到自动帮我们生成了一个函数basicTypes，示范了我们可以在AIDL里面使用的基本数据类型，这些类型可以当做参数或者函数返回值，这个函数我们没用到，不用理会，我们新增一个自己的函数add,AIDL文件创建到此结束。<br><img src="../assets/images/AIDL_File.png" alt><br>4.我们前面提到过，ADT和AS会自动为我们写的AIDL文件生成JAVA代码，这篇文章里面我用的AS，我们点击<img src="../assets/images/SYNC.png" alt>，然后在app/build/generated/source/aidl/debug/包名下可以看到自动生成的IMyAidlInterface.java,不过实际上这个文件我们不会去动它。如图3：<br><img src="../assets/images/AIDL_JAVA_File.png" alt><br>5.创建Service提供服务，AIDL涉及到IPC通信，所以需要使用绑定服务,在这里我们创建了一个内部类MyAidlImpl继承我们前面写的IMyAidlInterface，并实现了add函数，然后在onBind函数里面返回匿名MyAidlImpl实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package jackleeforce.aidlserver;</span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.support.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">public class AIDLService extends Service</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public class MyAidlImpl extends IMyAidlInterface.Stub</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public int add(int value1, int value2) throws RemoteException &#123;</span><br><span class="line">            return value1 + value2;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        @Override</span><br><span class="line">        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException &#123;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return new MyAidlImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.注册AIDLService,在AndroidManifest里面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=&quot;jackleeforce.aidlserver.AIDLService&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p><p>Server端口开发到此结束，实际上就三步，新增AIDL文件，然后创建绑定服务，在服务内实现我们要对外暴露的接口，然后注册服务，大家注意注册服务时我们写的name值，后面要用到，android:exported=”true”表示导出这个服务接口。接下来我们实现客户端。</p><h3 id="Client端实现"><a href="#Client端实现" class="headerlink" title="Client端实现"></a>Client端实现</h3><p>1.建立一个工程，命名:AIDLClient<br>2.把刚才在AIDLServer工程里面建的IMyAidlInterface.aidl文件拷贝过来，这里注意包名，一定要跟Server端的一致，可以直接从AIDLServer文件夹里面连同AIDL目录一起拷过来，然后在AS里面刷新一下文件就出现了,如图4:<br><br>3.我们刚才在服务端定义了一个add计算两个数字和的接口，现在在客户端要使用这个接口，为了演示，这里做个简单计算器好了，MainActivity布局文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:padding=&quot;16dp&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/et_a&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:inputType=&quot;number&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;+&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/et_b&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:inputType=&quot;number&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;=&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/et_result&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:enabled=&quot;false&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/calculate&quot;</span><br><span class="line">        android:layout_width=&quot;0dp&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:onClick=&quot;onCalculate&quot;</span><br><span class="line">        android:text=&quot;计算&quot; /&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>MainActivity.java代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">package jackleeforce.aidlclient;</span><br><span class="line"></span><br><span class="line">import android.content.ComponentName;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.ServiceConnection;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line">import jackleeforce.aidlserver.IMyAidlInterface;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    private EditText et_a;</span><br><span class="line">    private EditText et_b;</span><br><span class="line">    private EditText et_result;</span><br><span class="line">    private Button btn_calc;</span><br><span class="line">    private IMyAidlInterface mService;</span><br><span class="line">    private AddServiceConnect mServiceConnect;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">        initUI();</span><br><span class="line">    </span><br><span class="line">        connectService();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    </span><br><span class="line">        releaseService();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void initUI()</span><br><span class="line">    &#123;</span><br><span class="line">        et_a = (EditText)findViewById(R.id.et_a);</span><br><span class="line">        et_b = (EditText)findViewById(R.id.et_b);</span><br><span class="line">        et_result = (EditText)findViewById(R.id.et_result);</span><br><span class="line">        btn_calc = (Button)findViewById(R.id.calculate);</span><br><span class="line">    </span><br><span class="line">        btn_calc.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        switch (v.getId())</span><br><span class="line">        &#123;</span><br><span class="line">            case R.id.calculate:</span><br><span class="line">                calc();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void calc()</span><br><span class="line">    &#123;</span><br><span class="line">        int a = Integer.parseInt(et_a.getText().toString());</span><br><span class="line">        int b = Integer.parseInt(et_b.getText().toString());</span><br><span class="line">    </span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            int result = mService.add(a, b);</span><br><span class="line">    </span><br><span class="line">            et_result.setText(String.valueOf(result));</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    class AddServiceConnect implements ServiceConnection</span><br><span class="line">    &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            mService = IMyAidlInterface.Stub.asInterface(service);</span><br><span class="line">    </span><br><span class="line">            Toast.makeText(MainActivity.this,&quot;onServiceConnected&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">            mService = null;</span><br><span class="line">    </span><br><span class="line">            Toast.makeText(MainActivity.this,&quot;onServiceDisconnected&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void connectService()</span><br><span class="line">    &#123;</span><br><span class="line">        mServiceConnect = new AddServiceConnect();</span><br><span class="line">        Intent i = new Intent();</span><br><span class="line">    </span><br><span class="line">        i.setComponent(new ComponentName(&quot;jackleeforce.aidlserver&quot;,&quot;jackleeforce.aidlserver.AIDLService&quot;));</span><br><span class="line">        i.setPackage(getPackageName());</span><br><span class="line">    </span><br><span class="line">        boolean result = getApplicationContext().bindService(i,mServiceConnect, Context.BIND_AUTO_CREATE);</span><br><span class="line">        if (!result)</span><br><span class="line">        &#123;</span><br><span class="line">            Toast.makeText(MainActivity.this,&quot;bindService failed&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void releaseService()</span><br><span class="line">    &#123;</span><br><span class="line">        unbindService(mServiceConnect);</span><br><span class="line">        mServiceConnect = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到MainActivity起来的时候调用我们实现的connectService去连接服务端提供的服务，咱们看一下上面的connectService函数，第104行创建一个AddServiceConnect对象，从85行可以看到AddServiceConnect是一个内部类，实现了ServiceConnection接口，一看重载的两个方法名字就能明白，这是一个回调接口，当服务成功连接上了会调用onServiceConnected方法，89行我在onServiceConnected方法中，将返回的Binder对象转换成AIDL接口，以后就可以通过这个AIDL接口去调用服务端暴露出来的Service（在服务端实现的add）。当服务端因异常或者主动断开后，会执行onServiceDisConnected方法，表示已经断开连接。<br>接下来再回到connectService函数，第105行创建了一个Intent对象，接下来107和108两行代码非常关键，可以说是一个大坑，照着网络上大部分博文学习AIDL，最后无法成功绑定服务就是因为写错，107行设置Intent对象的ComponentName，第一个参数服务端的包名，第二个参数服务端暴露的Service名字,也就是前面实现服务端代码时在AndroidManifest里面注册的Service Name，这里是jackleeforce.aidlserver.AIDLService，由于Andorid 5.0以后不允许使用匿名Intent对象，这里在108行通过setPackage方法设置包名。然后在110行通过bindService函数去绑定服务。</p><p>到这里我们Server端与Client端代码都实现完成了，这里总结一下：<br>服务端<br>1.定义AIDL文件。<br>2.定义要暴露的的Service，并在里面实现AIDL文件中声明的方法。<br>3.注册Service，明确Service Name，并将Service声明成Export。</p><p>客户端<br>1.引入AIDL文件。<br>2.通过bindService函数去绑定服务端暴露的Service,系统会通过我们指定的Service Name找到这个Service，成功连接了以后会返回一个Binder对象，我们要用Stub.asInterface将这个Binder对象转换成我们需要的AIDL对象，这个AIDL对象的类实现代码就是系统自动为我们引入的AIDL文件生成的JAVA文件。<br>3.有了AIDL对象，我们就可以调用里面暴露的接口了。</p><p>分别编译运行AIDLServer与AIDLClient,我这里实现的例子中要先运行AIDLServer与AIDLClient，效果如图：<br><img src="../assets/images/Result.gif" alt></p><p>以上就是AIDL的基本使用知识，接下来我将专门写一篇文章讲诉如何通过AIDL传递复杂对象，并通过AIDL模拟实现QQ社交登陆SDK。</p><p>本文中的两个工程例子在此：<a href="https://github.com/lijiahua/AIDL_Test" target="_blank" rel="noopener">https://github.com/lijiahua/AIDL_Test</a></p>]]></content>
      
      
      <categories>
          
          <category> Android Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android,AIDL,进程间通信,技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
