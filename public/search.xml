<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[这个时代没有怀才不遇]]></title>
      <url>https://lijiahua.github.io/2018/10/10/%E8%BF%99%E4%B8%AA%E6%97%B6%E4%BB%A3%E6%B2%A1%E6%9C%89%E6%80%80%E6%89%8D%E4%B8%8D%E9%81%87/</url>
      <content type="html"><![CDATA[<p><img src="https://xqimg.imedao.com/16658d38d02be83fdbe00cf7.jpg" alt=""></p>
<p>假期里Boy 的微信读者群好不热闹，大家每天都在讨论各种职场成长的深度问题。前几天有人问道：</p>
<p>总是觉得自己怀才不遇，没人赏识自己，每天只能埋头苦干的人想要飞黄腾达出路在哪里？</p>
<p>今天的文章，我就来聊聊这个话题。在正式开始之前，我先抛出观点：</p>
<p>这个时代已经没有什么怀才不遇。所谓的怀才不遇，只是你的才能还不够罢了。</p>
<p>为了清晰说明这个问题，下面我从三点来分别解释。</p>
<p><strong>01</strong></p>
<p><strong>时代大趋势</strong></p>
<p>世界正变得越来越扁平。</p>
<p>如果你留意了最近的商业经济新闻，你会发现越来越多的公司都开始强调“无边界组织”。</p>
<p>这个概念最初来源于通用电气的CEO杰克韦尔奇，后来经过互联网时代的发展，逐渐升级变成许多大公司内部推行的一种组织架构革命。</p>
<p>什么叫无边界组织呢？</p>
<p>简单来说，就是企业不再按照传统的职能属性来划分部门，而是将它们糅合在一起，每个员工都可以和拥有不同技能的人在一个单元组织里共同协作，彼此之间没有边界，无障碍交流。</p>
<p>比如产品研发，销售，传播，公关甚至是财务都被放在一起，组成一个团队，共同攻克一个项目目标。等到目标达成，这些人又被打散到其他的单元组织里，为新的项目工作。</p>
<p>像谷歌、亚马逊、阿里巴巴、腾讯等许多互联网公司已经开始推行这种工作模式，并由此延伸出一套内部竞争机制。</p>
<p>他们让公司内部不同的团队共同PK一个项目，然后选出一个最佳方案，最后集中公司资源来帮助它迅速成长。团队里的每个人都对项目的最终结果负责，各自的才能被尽善其用，不存在谁职位高谁就能一言九鼎的情况。</p>
<p>许多我们熟知的互联网产品，例如微信、王者荣耀等就是腾讯内部竞争的产物。而它们的最初构想，都来源于最普通的员工。</p>
<p>这么做的好处，是能够迅速应对外界环境的变化，一旦出现新的竞争对手或市场风向改变，可以灵活迅速地制定对策并执行。你不需要拿着一份计划书从地区汇报到中央，再从中央汇报到全球总部。等到兜一圈下来终于决定做了，黄花菜都凉了。</p>
<p>无边界组织以目标为导向，强调“快、准、狠”。即：快速嗅到风向变化，准确把握市场需求，狠下手来全力以赴。</p>
<p>它并不遵循传统企业的金字塔式结构，不需要层层上报给大老板，也没有诸如总监、经理、主管的层级壁垒，更不会受制于庞大人员规模所带来的效率递减。无边界组织更像是企业内部一个个小的作战单元，可以随时组装，随时打散。</p>
<p>在这种扁平化的管理模式下，作为员工的每一个个体，不用担心自己的才能被埋没。因为这种组织的目的，就是让最有价值的想法能够最快地被接受和执行。</p>
<p>用大白话来说，这是一种“你行你上”的工作模式。它让最优秀的人才，在最短的时间里完成最有挑战的事情。</p>
<p>传统企业是存量思维，一个萝卜一个坑，越往金字塔顶端，机会越少；而扁平化组织是增量思维，它每时每刻都在创造新的机会。</p>
<p>比如现在很流行的众包工作模式，就是扁平化组织的一种应用。客户将项目需求发布在网上，全世界各地拥有相应技能的人聚集在一起，利用网络进行项目沟通与协作。</p>
<p>而每一次众包机会你都可以尝试不同的角色。例如今天你在这个项目做的是营销公关，下次可以去另一个项目做商务拓展，再过段时间去做产品经理也没问题。</p>
<p>只要你的能力足够强，机会总是源源不断。</p>
<p><img src="https://xqimg.imedao.com/16658d3c58dbef3fe15020e8.jpg" alt=""></p>
<p><strong>02</strong></p>
<p><strong>展示才能的出口越来越多</strong></p>
<p>我们身边你能展示才能的出口越来越多。</p>
<p>如今除了写微信公众号，还有各种各样的职业社交网站，专业技能论坛等供你展现自己的才能。</p>
<p>比如Linkedin 领英或者脉脉。这些地方每天聚集着各行各业的职场精英人士，你可以花时间去研究一下如何在上面优化自己的职业档案，加入某些主题讨论或者发布职业需求。</p>
<p>比如GitHub, 这里是程序员的天堂。每天都有各路好手在GitHub上交流技术经验，发布项目心得，你在这里能认识许多顶级互联网公司的大牛。</p>
<p>再比如像36Kr、知乎等这种商业科技泛知识类平台，现在也能开通个人专栏。你对某个领域有什么见解，就坚持不懈写下去，只要内容够好就一定能吸引与你志同道合的人。</p>
<p>总之，只要用心去找，你一定能找到可以展现自己才能的出口。</p>
<p>那些只会埋头苦干却不懂展示自己的人，是一定要被淘汰的。因为你需要花更久的时间，被动地让别人去了解你，接受你，赏识你。</p>
<p>但这个世界已经没有那么多时间去等你。</p>
<p>得益于互联网的飞速发展，怀才不再像怀孕，非得时间久了才能看得出来。一个人有没有才能，他说几句话，写几篇文章，发表几个观点就能看得出来。</p>
<p>刘备三顾茅庐的故事，现在基本不可能。除非你真有诸葛亮一般经天纬地之才，值得有人为你苦苦等待。否则，还是主动一点。</p>
<p>我有个朋友，在简历上就会放自己的作品集网站和公众号链接。每次面试的时候，面试官都会问他这是什么。这就打开了场面，接下来他能滔滔不绝和对方聊好久。</p>
<p>你看，主动一点，机会就能多一点。</p>
<p>以上两点，都是外面的变化，给你带来的机遇。这些近在眼前的机会如果还抓不住，那就真的不是怀才不遇的问题了。</p>
<p><img src="https://xqimg.imedao.com/16658d3d8f4a7f3feaef1439.jpg" alt=""></p>
<p><strong>03</strong></p>
<p><strong>如何让自己脱颖而出</strong></p>
<p>大家说几个小建议。没有花里胡哨的办法，只有最淳朴的七个字：</p>
<p>会写，会说，敢表现。</p>
<p>之所以说淳朴，是因为每个人都知道，但并不是每个人都能做到。下面我分别来讲。</p>
<p><strong>a）会写：勤于记录，积少成多</strong></p>
<p>能够把你的所思所想用逻辑清晰、精炼的文字准确表达出来，这就叫会写。</p>
<p>写作是成本最低的才能展示方法，也是未来每个人都要具备的底层核心能力。写作能力提高了，你的思维和表达能力也能够提升。</p>
<p>那么如何训练呢？最简单的办法，就是写“日志”。</p>
<p>注意，这个日志可不是朋友圈里的美食打卡或心情分享，而是你对时事热点的观察与思考。</p>
<p>比如，为什么范冰冰补缴了8亿罚款就可以不被追究刑事责任？这背后的法律考量是怎样的？税法这么规定对以后的行业发展有什么指导意义？</p>
<p>再比如，特斯拉的CEO 马斯克被迫退出董事会，这会对特斯拉未来的发展产生什么影响？为什么马斯克对特斯拉如此重要？他的接任者该如何处理接下来的烂摊子？</p>
<p>这些问题都是很好的思维锻炼与写作的素材。大家可以把自己的思考从50字100字写起，然后逐渐扩充篇幅，从写几句话，变成慢慢写几段话，最后再扩充成文章。</p>
<p>你写的篇幅越多，经验才会越足，对文字的驾驭能力也会越强。</p>
<p>可能这时有些朋友会问：我很想写，但是文笔不好写不出来怎么办呢？</p>
<p>这时你要去阅读。去找那些你认为写得好的作者的文章，耳濡目染地去感受他的写作思路和手法。时间久了，你写出来的东西就会带有这些人的印记。</p>
<p>打个不恰当的比方，这就好像你看郭敬明的文章多了，你写出来的文字也会“悲伤逆流成河”。参照物的力量都是潜移默化地影响着你。</p>
<p>当积累写到10万字的时候，你的写作能力会有一个质的飞跃。这时，你就拥有了展示自我才能的第一件武器。</p>
<p><strong>b）会说：放大声量，刻意练习</strong></p>
<p>能够把自己的观点声情并茂地讲出来，吸引听众的注意，这就是会说。</p>
<p>你有没有发现，口才好的人在职场上往往占尽先机。即使你脑子里有一大套东西，可是讲不出来，一样是白搭。</p>
<p>而那些会说的人，哪怕观点待斟酌，逻辑有问题，可在他的舌灿莲花下，这些瑕疵都能被掩饰过去。听众如果不仔细分析，很容易就被他这么带过去了。</p>
<p>也许你会认为这是忽悠，但会忽悠的人，同样有本事。你可以学其精华，去其糟粕。</p>
<p>怎么去做呢？最简单的方法，就是大声朗读。</p>
<p>你可以把你喜欢的书籍或文章，在家对着镜子大声朗读出来，提高自己的演讲临场感。</p>
<p>这个方法，来源于美国教授斯蒂夫卢卡斯写的《演讲的艺术》。在书中，他用这个简单的办法帮助了超过1000名“演讲恐惧者”克服障碍，流利演说。</p>
<p><img src="https://xqimg.imedao.com/16658d3ec4d9fd3fe2d749d3.jpg" alt=""></p>
<p>这里的秘诀在于，当你在大声朗读的时候，才能找到属于自己的说话节奏、习惯甚至毛病，这是除你之外其他人不可能知道的。只有通过亲身实践，你才可以找到最适合自己的演讲风格。</p>
<p>更进一步，你还可以大声朗读自己写的作品。这时你会发现，文字写出来和说出来，是完全不同的感觉。这个就留待大家去实践琢磨，你会发现许多意外惊喜。</p>
<p>除此之外，在日常生活中，你可以抓住任何交谈的机会，来锻炼自己的口才。比如拿奇葩说里的议题和朋友讨论，或者就某个新闻话题展开一番“小辩论”。这里并不用得出什么结论，而是在过程中不断练习说话的技巧。</p>
<p>最后完毕了，再做一番简单的复盘，总结一下自己讲话的语气、动作、声量、节奏都有哪些特点，通过朋友的反馈来帮助你更好了解自己，提升讲话的能力。</p>
<p>总之，用刻意练习的方法给自己创造机会多去说，它和写作一样都没有捷径，唯手熟尔。</p>
<p><strong>c）敢表现：放下脸面，不怕冒头</strong></p>
<p>上面两点说的都是技巧，最后这一点说的是心态。</p>
<p>这个时代比的不再是谁更有才，而是谁更有胆。如今许多人即使有才也不表现出来，他这不是怀才不遇，而是怀才不敢。</p>
<p>中国人都说枪打出头鸟，可看看我们周围那些闯出一番成绩的人，有哪个不是出头鸟？那些拼了命打压、嘲讽你的人，要么是自己也不敢，要么是害怕你比他还敢。而只有那些做不到的人，才会怂恿其他人也不要做到。</p>
<p>《权力的游戏》里，狮家的主人泰温兰尼斯特有句话说的很对：</p>
<p>“狮子从来不会去问羊的意见。”</p>
<p><img src="https://xqimg.imedao.com/16658d40708bf63f7941eb6f.jpg" alt=""></p>
<p>你如果真有一身才干，就不要去考虑那些懦弱胆小者的看法，而是去想如何利用大环境、渠道和资源来让自己的才能得到充分展现。</p>
<p>还记得文章最开头说的无边界组织吗？这就是一个很好的征兆。未来社会给予人才的平台只会越来越多，竞争也会越来越激烈，再也不会有“酒香不怕巷子深”。</p>
<p>所以请主动一点，不要像羊群一样永远呆在一个区域。而是运用互联网络、社交媒体等这些时代赋予你的武器，去开拓自己的视野与出口，像狮子一样去找寻猎物。</p>
<p>以上就是今天的内容，最后简单总结一下：</p>
<p>这个时代已经没有什么怀才不遇。</p>
<p>世界正变得越来越扁平，身边能够展示才能的出口也越来越多。想要脱颖而出，最简单的办法就是培养自己写作和说话的能力，最后再加上充分的胆量，不要偏安一隅。</p>
<p>记住，绵羊永远不可能成为狮子。</p>
<p>各位共勉。</p>
<p>作者：张良计</p>
<p>本文来源：张良计（ID:zhang_liangj）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[详解Android利用AIDL实现进程间通信]]></title>
      <url>https://lijiahua.github.io/2016/08/30/%E8%AF%A6%E8%A7%A3Android%E5%88%A9%E7%94%A8AIDL%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h2 id="什么是AIDL？"><a href="#什么是AIDL？" class="headerlink" title="什么是AIDL？"></a>什么是AIDL？</h2><p>AIDL是 Android Interface definition language的缩写，是Android的一种接口定义语言。通过它我们可以定义在Android上实现进程间通信的接口,在ADT和AS中会自动为我们写好的AIDL文件生成JAVA代码。<br>在Android中，为了实现进程间访问需要把复杂对象分解成操作系统可以理解的基本数据类型，在跨过进程边界后再组合成对象，实现组合成对象的代码单调又难于开发，好在Android为我们提供了AIDL处理这些功能。</p>
<h2 id="什么场合下用AIDL？"><a href="#什么场合下用AIDL？" class="headerlink" title="什么场合下用AIDL？"></a>什么场合下用AIDL？</h2><p>直接看官方指南:<a href="https://developer.android.com/guide/components/aidl.html的这段话：" target="_blank" rel="external">https://developer.android.com/guide/components/aidl.html的这段话：</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Note: Using AIDL is necessary only if you allow clients from different applications </div><div class="line">to access your service for IPC and want to handle multithreading in your service. </div><div class="line">If you do not need to perform concurrent IPC across different applications, you </div><div class="line">should create your interface by implementing a Binder or, if you want to perform </div><div class="line">IPC, but do not need to handle multithreading, implement your interface using a </div><div class="line">Messenger.</div></pre></td></tr></table></figure>
<p>只有在你允许多个应用程序访问你提供的服务进行进程间通信，并且在提供的服务中涉及到多线程处理的时候才需要使用到AIDL。如果你无需处理多应用并发通信，你应该采用Binder进行进程间通信。如果你实现的进程间通信未涉及多线程处理，你需要采用Messenger进行进程间通信。<br>一般适用于为其它应用程序提供公共服务的Service，这种Service即为系统常驻的Service(如：天气服务，日历服务等)。</p>
<h2 id="选择AIDL进行进程间通信有什么优缺点"><a href="#选择AIDL进行进程间通信有什么优缺点" class="headerlink" title="选择AIDL进行进程间通信有什么优缺点?"></a>选择AIDL进行进程间通信有什么优缺点?</h2><p>优点:<br>1.AIDL有自己的独立进程，不会受到其它进程的影响；<br>2.可以被其它进程复用，提供公共服务；<br>3.具有很高的灵活性。<br>4.相比Messenger,可以传输的数据量大。<br>缺点:<br>1.相对普通服务，占用系统资源较多，使用AIDL进行IPC也相对麻烦。</p>
<h2 id="AIDL如何使用？"><a href="#AIDL如何使用？" class="headerlink" title="AIDL如何使用？"></a>AIDL如何使用？</h2><p>既然用AIDL的最终目标是进行不同进程间通信，那这里咱们搞两个APP，一个Server,提供一个Service，用来对传入的参数做加法运算，另外一个Client,调用Server提供的Service。</p>
<h3 id="Server端实现"><a href="#Server端实现" class="headerlink" title="Server端实现"></a>Server端实现</h3><p>1.建立一个工程，命名:AIDLServer<br>2.新建AIDL文件,命名:IMyAidlInterface<br><img src="/2016/08/30/详解Android利用AIDL实现进程间通信/Create_AIDL_File.png" alt="[图1]" title="[图1]"><br>3.生成后如图2，可以看到自动帮我们生成了一个函数basicTypes，示范了我们可以在AIDL里面使用的基本数据类型，这些类型可以当做参数或者函数返回值，这个函数我们没用到，不用理会，我们新增一个自己的函数add,AIDL文件创建到此结束。<br><img src="/2016/08/30/详解Android利用AIDL实现进程间通信/AIDL_File.png" alt="[图2]" title="[图2]"><br>4.我们前面提到过，ADT和AS会自动为我们写的AIDL文件生成JAVA代码，这篇文章里面我用的AS，我们点击<img src="/2016/08/30/详解Android利用AIDL实现进程间通信/SYNC.png" alt="SYNC.png" title="">，然后在app/build/generated/source/aidl/debug/包名下可以看到自动生成的IMyAidlInterface.java,不过实际上这个文件我们不会去动它。如图3：<br><img src="/2016/08/30/详解Android利用AIDL实现进程间通信/AIDL_JAVA_File.png" alt="[图3]" title="[图3]"><br>5.创建Service提供服务，AIDL涉及到IPC通信，所以需要使用绑定服务,在这里我们创建了一个内部类MyAidlImpl继承我们前面写的IMyAidlInterface，并实现了add函数，然后在onBind函数里面返回匿名MyAidlImpl实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package jackleeforce.aidlserver;</div><div class="line">import android.app.Service;</div><div class="line">import android.content.Intent;</div><div class="line">import android.os.IBinder;</div><div class="line">import android.os.RemoteException;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line"></div><div class="line">public class AIDLService extends Service</div><div class="line">&#123;</div><div class="line"></div><div class="line">    public class MyAidlImpl extends IMyAidlInterface.Stub</div><div class="line">    &#123;</div><div class="line">        @Override</div><div class="line">        public int add(int value1, int value2) throws RemoteException &#123;</div><div class="line">            return value1 + value2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        return new MyAidlImpl();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6.注册AIDLService,在AndroidManifest里面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;service android:name=&quot;jackleeforce.aidlserver.AIDLService&quot;</div><div class="line">            android:exported=&quot;true&quot;&gt;</div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure></p>
<p>Server端口开发到此结束，实际上就三步，新增AIDL文件，然后创建绑定服务，在服务内实现我们要对外暴露的接口，然后注册服务，大家注意注册服务时我们写的name值，后面要用到，android:exported=”true”表示导出这个服务接口。接下来我们实现客户端。</p>
<h3 id="Client端实现"><a href="#Client端实现" class="headerlink" title="Client端实现"></a>Client端实现</h3><p>1.建立一个工程，命名:AIDLClient<br>2.把刚才在AIDLServer工程里面建的IMyAidlInterface.aidl文件拷贝过来，这里注意包名，一定要跟Server端的一致，可以直接从AIDLServer文件夹里面连同AIDL目录一起拷过来，然后在AS里面刷新一下文件就出现了,如图4:<br><img src="/2016/08/30/详解Android利用AIDL实现进程间通信/AIDL_Client_File.png" alt="[图4]" title="[图4]"><br>3.我们刚才在服务端定义了一个add计算两个数字和的接口，现在在客户端要使用这个接口，为了演示，这里做个简单计算器好了，MainActivity布局文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:padding=&quot;16dp&quot;</div><div class="line">    tools:context=&quot;.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">        android:id=&quot;@+id/et_a&quot;</div><div class="line">        android:layout_width=&quot;0dp&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:inputType=&quot;number&quot;</div><div class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;+&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">        android:id=&quot;@+id/et_b&quot;</div><div class="line">        android:layout_width=&quot;0dp&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:inputType=&quot;number&quot;</div><div class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;=&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;EditText</div><div class="line">        android:id=&quot;@+id/et_result&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:enabled=&quot;false&quot;</div><div class="line">        android:gravity=&quot;center_horizontal&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/calculate&quot;</div><div class="line">        android:layout_width=&quot;0dp&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:onClick=&quot;onCalculate&quot;</div><div class="line">        android:text=&quot;计算&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>MainActivity.java代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">package jackleeforce.aidlclient;</div><div class="line"></div><div class="line">import android.content.ComponentName;</div><div class="line">import android.content.Context;</div><div class="line">import android.content.Intent;</div><div class="line">import android.content.ServiceConnection;</div><div class="line">import android.os.IBinder;</div><div class="line">import android.os.RemoteException;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.Button;</div><div class="line">import android.widget.EditText;</div><div class="line">import android.widget.Toast;</div><div class="line">import jackleeforce.aidlserver.IMyAidlInterface;</div><div class="line"></div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private EditText et_a;</div><div class="line">    private EditText et_b;</div><div class="line">    private EditText et_result;</div><div class="line">    private Button btn_calc;</div><div class="line">    private IMyAidlInterface mService;</div><div class="line">    private AddServiceConnect mServiceConnect;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initUI();</div><div class="line"></div><div class="line">        connectService();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line"></div><div class="line">        releaseService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initUI()</div><div class="line">    &#123;</div><div class="line">        et_a = (EditText)findViewById(R.id.et_a);</div><div class="line">        et_b = (EditText)findViewById(R.id.et_b);</div><div class="line">        et_result = (EditText)findViewById(R.id.et_result);</div><div class="line">        btn_calc = (Button)findViewById(R.id.calculate);</div><div class="line"></div><div class="line">        btn_calc.setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId())</div><div class="line">        &#123;</div><div class="line">            case R.id.calculate:</div><div class="line">                calc();</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void calc()</div><div class="line">    &#123;</div><div class="line">        int a = Integer.parseInt(et_a.getText().toString());</div><div class="line">        int b = Integer.parseInt(et_b.getText().toString());</div><div class="line"></div><div class="line">        try</div><div class="line">        &#123;</div><div class="line">            int result = mService.add(a, b);</div><div class="line"></div><div class="line">            et_result.setText(String.valueOf(result));</div><div class="line">        &#125;</div><div class="line">        catch (Exception e)</div><div class="line">        &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class AddServiceConnect implements ServiceConnection</div><div class="line">    &#123;</div><div class="line">        @Override</div><div class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</div><div class="line">            mService = IMyAidlInterface.Stub.asInterface(service);</div><div class="line"></div><div class="line">            Toast.makeText(MainActivity.this,&quot;onServiceConnected&quot;,Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceDisconnected(ComponentName name) &#123;</div><div class="line">            mService = null;</div><div class="line"></div><div class="line">            Toast.makeText(MainActivity.this,&quot;onServiceDisconnected&quot;,Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void connectService()</div><div class="line">    &#123;</div><div class="line">        mServiceConnect = new AddServiceConnect();</div><div class="line">        Intent i = new Intent();</div><div class="line"></div><div class="line">        i.setComponent(new ComponentName(&quot;jackleeforce.aidlserver&quot;,&quot;jackleeforce.aidlserver.AIDLService&quot;));</div><div class="line">        i.setPackage(getPackageName());</div><div class="line"></div><div class="line">        boolean result = getApplicationContext().bindService(i,mServiceConnect, Context.BIND_AUTO_CREATE);</div><div class="line">        if (!result)</div><div class="line">        &#123;</div><div class="line">            Toast.makeText(MainActivity.this,&quot;bindService failed&quot;,Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void releaseService()</div><div class="line">    &#123;</div><div class="line">        unbindService(mServiceConnect);</div><div class="line">        mServiceConnect = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到MainActivity起来的时候调用我们实现的connectService去连接服务端提供的服务，咱们看一下上面的connectService函数，第104行创建一个AddServiceConnect对象，从85行可以看到AddServiceConnect是一个内部类，实现了ServiceConnection接口，一看重载的两个方法名字就能明白，这是一个回调接口，当服务成功连接上了会调用onServiceConnected方法，89行我在onServiceConnected方法中，将返回的Binder对象转换成AIDL接口，以后就可以通过这个AIDL接口去调用服务端暴露出来的Service（在服务端实现的add）。当服务端因异常或者主动断开后，会执行onServiceDisConnected方法，表示已经断开连接。<br>接下来再回到connectService函数，第105行创建了一个Intent对象，接下来107和108两行代码非常关键，可以说是一个大坑，照着网络上大部分博文学习AIDL，最后无法成功绑定服务就是因为写错，107行设置Intent对象的ComponentName，第一个参数服务端的包名，第二个参数服务端暴露的Service名字,也就是前面实现服务端代码时在AndroidManifest里面注册的Service Name，这里是jackleeforce.aidlserver.AIDLService，由于Andorid 5.0以后不允许使用匿名Intent对象，这里在108行通过setPackage方法设置包名。然后在110行通过bindService函数去绑定服务。</p>
<p>到这里我们Server端与Client端代码都实现完成了，这里总结一下：<br>服务端<br>1.定义AIDL文件。<br>2.定义要暴露的的Service，并在里面实现AIDL文件中声明的方法。<br>3.注册Service，明确Service Name，并将Service声明成Export。</p>
<p>客户端<br>1.引入AIDL文件。<br>2.通过bindService函数去绑定服务端暴露的Service,系统会通过我们指定的Service Name找到这个Service，成功连接了以后会返回一个Binder对象，我们要用Stub.asInterface将这个Binder对象转换成我们需要的AIDL对象，这个AIDL对象的类实现代码就是系统自动为我们引入的AIDL文件生成的JAVA文件。<br>3.有了AIDL对象，我们就可以调用里面暴露的接口了。</p>
<p>分别编译运行AIDLServer与AIDLClient,我这里实现的例子中要先运行AIDLServer与AIDLClient，效果如图：<br><img src="/2016/08/30/详解Android利用AIDL实现进程间通信/Result.gif" alt="[最终效果]" title="[最终效果]"></p>
<p>以上就是AIDL的基本使用知识，接下来我将专门写一篇文章讲诉如何通过AIDL传递复杂对象，并通过AIDL模拟实现QQ社交登陆SDK。</p>
<p>本文中的两个工程例子在此：<a href="https://github.com/lijiahua/AIDL_Test" target="_blank" rel="external">https://github.com/lijiahua/AIDL_Test</a></p>
]]></content>
    </entry>
    
  
  
</search>
